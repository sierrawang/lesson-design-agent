# Return all of the lines in the log file for this task
def get_log_contents(log_filename):
    # Read the log contents
    with open(log_filename, 'r') as log_file:
        log_contents = log_file.read()
    
    # Split the log contents into lines
    lines = log_contents.split('\n')

    return lines

# Get the log lines for this specific run, given the log contents
def get_logs_for_run(log_contents, run_it):
    result = []
    current_index = 0

    # Find the start of the run
    while log_contents[current_index] != f'INFO - Starting run {run_it}!':
        current_index += 1

    # Add the contents until the end of the run
    while current_index < len(log_contents) and log_contents[current_index] != f'INFO - Finished run {run_it}!':
        result.append(log_contents[current_index])
        current_index += 1

    return result

def get_lesson_url(current_task_id, site_url):
    return f"{site_url}/cip4/learn/{current_task_id}/"

def get_slide_from_url(current_url, lesson_url):
    return current_url.split(lesson_url)[-1]

def add_description(current_url, description, lesson_url):
    return current_url and description and current_url.startswith(lesson_url)

# Return a dictionary of the descriptions that the agent generated 
# for each step of the lesson
def get_description_from_logs(run_logs, lesson_url):
    # Initialize a dictionary to store the slide descriptions
    descriptions = {}
    current_url = None
    description = None

    # Loop over every line and determine whether it's a relevant description
    line_index = 0
    num_lines = len(run_logs)
    for line_index in range(num_lines):
        line = run_logs[line_index]

        # Check if line indicates a new current URL
        if line.startswith('INFO - Current URL: '):
            # If we have a previous URL and description, 
            # and the URL is relevant to the current task, 
            # store them
            if add_description(current_url, description, lesson_url):
                slide = get_slide_from_url(current_url, lesson_url)
                if slide not in descriptions: # ignore duplicates
                    descriptions[slide] = description

            # Parse out the new URL and reset the description and thought
            current_url = line.split('Current URL:')[-1].strip()
            description = None

        # Check if line indicates a parsed description
        elif line.startswith('INFO - Parsed Description: '):
            # Initialize the description with the first line
            description = f"   {line.split('Parsed Description:')[-1]}\n"
            line_index += 1

            while True:
                line = run_logs[line_index]
                if line.startswith('INFO - Parsed Thought: '):
                    break

                # Append the line to the description and move to the next line
                description += f"   {line}\n"
                line_index += 1

    # After the loop, check if there's one last set to append
    if add_description(current_url, description, lesson_url):
        slide = get_slide_from_url(current_url, lesson_url)
        if slide not in descriptions:
            descriptions[slide] = description

    return descriptions

# Return a description of the lesson generated by the agent run
def get_lesson_description_from_agent_run(current_task_id, run_it, log_filename, 
                                          site_url='https://codeinplace.stanford.edu'):
    # Get the lines of the log file
    log_contents = get_log_contents(log_filename)

    # Get the logs corresponding to the given run
    run_logs = get_logs_for_run(log_contents, run_it)

    # Get the URL of the lesson
    lesson_url = get_lesson_url(current_task_id, site_url)

    # Get the lesson description from the logs
    lesson_description = get_description_from_logs(run_logs, lesson_url)

    return lesson_description